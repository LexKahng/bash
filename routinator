#!/bin/bash
####################################################################################
# Author: Daniel Kahng #############################################################
# Ver: 0.1.1 #######################################################################
### Purpose & Overview #############################################################
# The script will be used to retrieve network resource relationships to the instance. 
# The script currently takes instanceID as input.
#*** Assumes:AWS_PROFILE and AWS_REGION is already set ***
#*** Assumes: nmap installed ***
# For collaborators: Please refer to Variable Dictionary at the bottom
####################################################################################
# Current To Do: 
# Access Investigator: access to target ec2 investigation
# variable convention: main variablename + 2 : eg. availabilityZone2
# 	variable of the target will be local. global will mess shit up.
# sub-option will have choice for ec2 input:
# This will be used to check against the first instance. 
#####################################################################################
# Long term goals:
# Access Investigator: for various types of resources (possibly check iam roles)
# Input Validation for first option, or any string input. Expand the input type and
# possibly node name
####################################################################################
### Main Section ###################################################################

main() {
	SWITCHROLE_SCRIPT_PATH="$HOME/bash/switchrole"
	exec "$SWITCHROLE_SCRIPT_PATH"
	instanceID=""
	while [[ -z "$instanceID" ]]; do
		read -p "Enter that instanceID: " instanceID
	done
	
	#Run the Alpha functions
	secondaryResourceSet=false
	primaryResourceSet=false
	instanceAttributes $instanceID
	instanceAttributeTell
	
	#need case option function here after defining
	#1) Show Route table
	#2) Show ACL
	#3) Show SG
	#4) I want to see if my thingey can route to another thingey
	optionMain
		

	set -u
	echo "Don't quit on me now... :("
}




### Variable Dictionary - To be moved to a separate File ###########################
#instanceType - Prints Instance Type
#currentStatus - Stores state of the Instance. If the instance is running, will print "running"
#subnetId - Stores Subnet ID
#availabilityZone - Stores Availability Zone
#routeTableId - Stores Route Table ID
#routeTable - Stores Table format of the routeTable
####################################################################################
### Global Variable Instantiation ##################################################
### (Trying to remove global varialbes if possible) ################################
availabilityZone=""
cidrBlock=""
currentStatus=""
instanceID=""
instanceType=""
subnetId=""
routeTableMain=""
vpcId="" 
sgTable=""
sgLength=""
aclTableOutbound=""
aclTableInbound=""
aclId=""
secondaryResourceSet=false
primaryResourceSet=false

####################################################################################
### Global Stuffs ##################################################################

### In progress ####################################################################

### F()::setInv
# Returns: Nothing
# Role: Used by F()::optionInv
# Assumes: f()::instanceAttributes ran already
# 
setInv() {
	invTarget=""
	#inputValid=false
	#put $inputValid as one of While condition (while empty input or wrong input, do)
	while [[ -z "$invTarget" ]]; do
		read -p "Enter instanceID you want to test connectivity for: " invTarget
	done
	instanceAttributes $invTarget
	instanceAttributeTell
}

### F()::optionInv
# Returns: Options
# Assumes: runs under F()::main
# Answers user query regarding Access investigator
optionInv() {

	#may need to add local variable to segregate this function for reuse
	setInv
	echo "Testing against target: $invTarget"
	PS3="Choose an option from above to test against $invTarget: "
	options=("Show me the route table of $invTarget" "I want to check if I can route to the instance" "Back to Main")
	
	select opt in "${options[@]}"
	do
	    case $opt in
	        "Show me the route table of $invTarget")
	        	#to be completed later
	        	echo "$secondaryResourceSet"
            	optionReviewer	
	            ;;
	        "I want to check if I can route to the instance")
	        	routeChecker
	        	unset routeChecker
	        	optionReviewer
	        	;;
	        "Back to Main")
	        	secondaryResourceSet=false
	            break
	            ;;
	        *) echo "invalid option $REPLY";;
    	esac
	done
	
}



### F()::routeChecker
# Returns: Options
# Assumes: runs under F()::main
# Answers user query regarding Access investigator
routeChecker() {
	local routeTableId=""
	local routeTable=""
	local igwId=""
	local routeTableTarget=""
	local vpcMatch=false
	local peeredVpcTable=""
	local peeredVpcText=""
	sameVPCBool=false
	sameSubnetBool=false
	
	
	echo "## Results ############################################"
	#1) vpc check
	if [[ "$vpcId" == "$vpcIdTarget" ]]; then
		sameVPCBool=true
		echo "They are both under the same vpc. They can route to each other."

	else
		echo "They are under a different VPC. Checking route now..."
		setRoute "$subnetIdTarget"
		routeTableTarget="$routeTable"
		#If $routeTableMain was never stored (for main instance we are checking against)
		if [[ -z "$routeTableMain" ]]; then
			routeTableId=""
			routeTable=""
			igwId=""
			setRoute "$subnetId"
			routeTableMain="$routeTable"
		fi
		echo "This is the route table of the source:"
		echo "## Source #############################################"
		echo "$routeTableMain"
		echo "This is the route table of the target:"
		echo "## Target #############################################"
		echo "$routeTableTarget"	
		echo "Checking routability..."
		echo "Following are the peered VPC's"
		peeredVpcTable=`aws ec2 describe-vpc-peering-connections --query "VpcPeeringConnections[? Status.Code=='active'].{Acceptor:AccepterVpcInfo.VpcId,Requestor:RequesterVpcInfo.VpcId}" --output table`
		peeredVpcText=`aws ec2 describe-vpc-peering-connections --query "VpcPeeringConnections[? Status.Code=='active'].{Acceptor:AccepterVpcInfo.VpcId,Requestor:RequesterVpcInfo.VpcId}" --output text`
		echo "$peeredVpcTable"
		
		##below doesnt work yet
		# if [[ -n "$peeredVpcText" ]]; then
# 			for line in $peeredVpcText; do
# 				temp=$(awk '{print $1}' <<< "$line")
# 				if [[ "$temp" == "$vpcIdTarget" ]]; then
# 					if [[ "$temp" == "$vpcId" ]]; then
# 						vpcMatch=true
# 					fi
# 				fi
# 			done
# 			unset temp
# 			
# 			if [[ $vpcMatch = true ]]; then
# 				echo "There is connectivity"
# 				echo "$peeredVpcTable"
# 			fi
# 		else
# 			echo "There is no connectivity between the 2 instances at the AWS infrastructure level"
# 		fi
	fi


	
	
	echo "## End ################################################"
}
####################################################################################


### F()::instanceAttributes
# Assumes: This needs to be run first to set up core attributes for the instance input 
# User's instance attributes are stored for processing
# condition: runs for primary instance if attributes are not set.
# need to refactor to make this function act globally and use local variable to assign global variable conditionally
instanceAttributes() {
	if [[ $primaryResourceSet = false ]]; then	
		instanceType=`aws ec2 describe-instances --instance-id $1 --query 'Reservations[*].Instances[*].[InstanceType]' --output text`
		currentStatus=`aws ec2 describe-instances --instance-ids $1 --query 'Reservations[*].Instances[*].[State.Name]' --output text`
		subnetId=`aws ec2 describe-instances --instance-ids $1 --query 'Reservations[*].Instances[*].[SubnetId]' --output text`
		availabilityZone=`aws ec2 describe-instances --instance-ids $1 --query 'Reservations[*].Instances[*].[Placement.AvailabilityZone]' --output text`
		cidrBlock=`aws ec2 describe-subnets --query "Subnets[?SubnetId=='$subnetId'].CidrBlock" --output text`
		vpcId=`aws ec2 describe-instances --instance-ids $1 --query 'Reservations[*].Instances[*].[VpcId]' --output text`
		primaryResourceSet=true	
	elif [[ $secondaryResourceSet = false ]]; then
		instanceTypeTarget=`aws ec2 describe-instances --instance-id $1 --query 'Reservations[*].Instances[*].[InstanceType]' --output text`
		currentStatusTarget=`aws ec2 describe-instances --instance-ids $1 --query 'Reservations[*].Instances[*].[State.Name]' --output text`
		subnetIdTarget=`aws ec2 describe-instances --instance-ids $1 --query 'Reservations[*].Instances[*].[SubnetId]' --output text`
		availabilityZoneTarget=`aws ec2 describe-instances --instance-ids $1 --query 'Reservations[*].Instances[*].[Placement.AvailabilityZone]' --output text`
		cidrBlockTarget=`aws ec2 describe-subnets --query "Subnets[?SubnetId=='$subnetIdTarget'].CidrBlock" --output text`
		vpcIdTarget=`aws ec2 describe-instances --instance-ids $1 --query 'Reservations[*].Instances[*].[VpcId]' --output text`
		# this resource will be unset on any where instanceAttributes is called
		secondaryResourceSet=true
	fi
}



### F()::instanceAttributeTell
# Returns: String
# Assumes: f()::instanceAttributes ran already
# (Optional) Returns instance attributes to the user
# Currently used for instance investigation only 
instanceAttributeTell() {
if [[ $secondaryResourceSet = true ]]; then
	echo "---------------------------------------------"
	echo "Instance type:	$instanceTypeTarget"
	echo "Status:		$currentStatusTarget"
	echo "Subnet:		$subnetIdTarget"
	echo "Cidr:		$cidrBlockTarget"
	echo "AZ:		$availabilityZoneTarget"
	echo "VpcID:		$vpcIdTarget"
	echo "---------------------------------------------"
else
	echo "---------------------------------------------"
	echo "Instance type:	$instanceType"
	echo "Status:		$currentStatus"
	echo "Subnet:		$subnetId"
	echo "Cidr:		$cidrBlock"
	echo "AZ:		$availabilityZone"
	echo "VpcID:		$vpcId"
	echo "---------------------------------------------"
fi
}



### F()::setRoute
# Receives: Subnet ID as input
# Returns: Nothing
# Role: Used by F()::optionRoute
# Assumes: f(instanceAttributes) ran already
# Retrieves the instance route information
setRoute() {
	routeTableId=`aws ec2 describe-route-tables --query "RouteTables[*].Associations[?SubnetId=='$1'].RouteTableId" --output text`
	if [[ -z "$routeTableId" ]]; then
		#This is done because implicitly associated route tables will return null. If null, uses VPC default
		#the below association have not yet been checked for VPC specificity, meaning it may return wrong value 
		routeTableId=`aws ec2 describe-route-tables --query "RouteTables[*].Associations[?Main].RouteTableId" --output text`
	fi
	routeTable=`aws ec2 describe-route-tables --route-table-ids $routeTableId --query 'RouteTables[*].Routes[*].{Destination:DestinationCidrBlock,Target:GatewayId,State:State}' --output table`
	igwId=`aws ec2 describe-route-tables --route-table-ids $routeTableId --query 'RouteTables[*].routeTable[*].GatewayId' --output text | grep -o '\bigw-\w*'`
}



### F()::setSG
# Returns: Nothing
# Role: Used by F()::optionSG
# Assumes: f()::instanceAttributes ran already
# Assigns Table formatted route information to $routeTable
setSG() {
	sgTable=`aws ec2 describe-instances --instance-id $instanceID --query 'Reservations[*].Instances[*].SecurityGroups[*].{GroupName:GroupName,GroupId:GroupId}' --output table`
	sgLength=`aws ec2 describe-instances --instance-id $instanceID --query 'Reservations[*].Instances[*].SecurityGroups[*]' | awk '/{/ {d++} /}/ {d--} /{/ && d==1 {count++} END{print count}'`
}



## F()::setACL
# Returns: Nothing
# Role: Used by F()::optionACL
# Assumes: f()::instanceAttributes ran already
# Assigns Table formatted route information to $aclTable
setACL() {
	if [[ -n “$subnetId” ]]; then
		aclId=`aws ec2 describe-network-acls --query "NetworkAcls[*].Associations[?SubnetId=='$subnetId'].NetworkAclId" --output text`
		if [[ -z aclId ]]; then
			aclId=`aws ec2 describe-network-acls --query "NetworkAcls[? VpcId=='$vpcId' && IsDefault].NetworkAclId" --output text`
		fi
	fi
	
	if [[ -n "$aclId" ]]; then
		aclTableOutbound=`aws ec2 describe-network-acls --network-acl-ids "$aclId" --query 'NetworkAcls[*].Entries[?Egress].{Cidr:CidrBlock,Rule:RuleAction,RuleNumber:RuleNumber}' --output table`
		aclTableInbound=$(aws ec2 describe-network-acls --network-acl-ids "$aclId" --query 'NetworkAcls[*].Entries[?Egress==`false`].{Cidr:CidrBlock,Rule:RuleAction,RuleNumber:RuleNumber}' --output table)
	else
		aclTableOutbound="No ACL associated with SG? a bug in code?"
		aclTableOutbound="No ACL associated with SG? a bug in code?"
	fi
	
}



## F()::optionMain
# Returns: The Main menu for users to dig deeper
# Assumes: f()::instanceAttributes and F()::instanceAttributeTell ran already
# Provides different options for investigation
optionMain() {
	PS3="Select from the list above if you want to know more about $instanceID: "
	PS3Copy=$PS3
	options=("Route Table" "Network ACL" "Security Group Information" "Access Investigator" "Quit")
	
	### F()::optionMain::optionMenuRestore 
	# Main Menu Management
	optionMain=$(optionReviewer)
	optionMenuRestore() {
		PS3=$PS3Copy
		echo "$PS3"
		echo "$optionMain"
	}
	
	select opt in "${options[@]}"
	do
    	case $opt in
        	"Route Table")
        		optionRoute
        		optionMenuRestore
            	;;
       		"Network ACL")
       			optionACL
        		optionMenuRestore
            	;;
        	"Security Group Information")
            	optionSG
            	optionMenuRestore
            	;;
            "Access Investigator")
            	#currently being worked on
            	optionInv
            	optionMenuRestore
            	;;
        	"Quit")
            	break
            	;;
        	*) echo "invalid option $REPLY";;
    	esac
	done
}



### F()::optionRoute
# Returns: Options
# Assumes: runs under F()::main
# Answers user query regarding instance routing
optionRoute() {
	local routeTableId=""
	local routeTable=""
	local igwId=""
	if [[ -z "$routeTableMain" ]]; then
		if [[ secondaryResourceSet = true ]]; then
			setRoute "$subnetIdTarget"
			routeTableTarget="$routeTable"
		else
			setRoute "$subnetId"
			routeTableMain="$routeTable"			
		fi
	fi
	PS3="Select from the list above if you want to know more about $instanceID's Route: "
	options=("View RouteID and Route Table" "Back to Main")
	
	select opt in "${options[@]}"
	do
	    case $opt in
	        "View RouteID and Route Table")
            	echo "$instanceID routes via: $routeTableId"
            	echo "This is the route table:"
            	echo "$routeTable"
            	optionReviewer           	
	            ;;
	        "Back to Main")
	            break
	            ;;
	        *) echo "invalid option $REPLY";;
    	esac
	done
}



### F()::optionACL
# Returns: Options
# Assumes: runs under F()::main
# Answers user query regarding ACL
optionACL() {
	#need if condition to find preexisting like others: (this is for run efficiency; do not want to search for something already found
	if [[ -z "$aclTable" ]]; then
		setACL
	fi
	
	PS3="Select from the list above if you want to know more about $instanceID's ACL: "
	options=("View Outbound ACL Rules" "View Inbound ACL Rules" "Back to Main")
	
	select opt in "${options[@]}"
	do
	    case $opt in
	        "View Outbound ACL Rules")
            	echo "$aclTableOutbound"
            	optionReviewer
	            ;;
	        "View Inbound ACL Rules")
            	echo "$aclTableInbound"
            	optionReviewer
	            ;;
	        "Back to Main")
	            break
	            ;;
	        *) echo "invalid option $REPLY";;
    	esac
	done
}



### F()::optionSG
# Returns: Options
# Assumes: runs under F()::main
# Answers user query regarding Security Group
optionSG() {
	#Retrieves the instance's SG information if values are empty.
	if [[ -z "$sgLength" ]]; then
		setSG
	fi
	echo "$sgTable"
	#sgIdIngressTable=""
	#sgIdEgressTable=""
	PS3="Select from the list above if you want to know more about $instanceID's Security Groups: "
	options=("View a specific Group" "Back to Main")
	
	select opt in "${options[@]}"
	do
	    case $opt in
	        "View a specific Group")
	        	read -p "Enter the SG ID: " sgID
	        	echo "Viewing Rules for: $sgID"
	        	sgIdIngressTable=`aws ec2 describe-security-groups --query "SecurityGroups[? GroupId=='$sgID'].IpPermissions[*].{FromPort:FromPort,IpRanges:IpRanges[0].CidrIp,IpProtocol:IpProtocol}" --output table`
	        	sgIdEgressTable=`aws ec2 describe-security-groups --query "SecurityGroups[? GroupId=='$sgID'].IpPermissionsEgress[*].{FromPort:FromPort,IpRanges:IpRanges[0].CidrIp,IpProtocol:IpProtocol}" --output table`
	        	echo "## This is the Inbound Table ##########################"
	        	echo "$sgIdIngressTable"
	        	echo "## This is the Outbound Table ##########################"
	        	echo "$sgIdEgressTable"
	        	echo "## End ################################################"
	        	echo "$sgTable"
	        	optionReviewer
	        	;;
	        "Back to Main")
	            break
	            ;;
	        *) echo "invalid option $REPLY";;
    	esac
	done
}



### F()::optionReviewer
# Returns: Displays options of current Menu
# Assumes: Triggered within menus (case) Assumes $options is assigned
optionReviewer() {
echo "Here are your current options:"
counter=1
for i in "${options[@]}"
do
    echo "$counter) $i"
    ((counter++))
done
}

main "$@"