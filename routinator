#!/bin/bash
####################################################################################
### Purpose & Overview #############################################################
#The script will be used to retrieve network resource relationships to the instance. 
#The script currently takes instanceID as input.
#
####################################################################################
### instance type, running state, subnet, az #######################################
### Variable Dictionary
#instanceType - Prints Instance Type
#currentStatus - Stores state of the Instance. If the instance is running, will print "running"
#subnetId - Stores Subnet ID
#availabilityZone - Stores Availability Zone
#routeTableId - Stores Route Table ID
#routes - Stores Table format of the Routes
####################################################################################
### Variable Instantiation #########################################################
instanceType=""
currentStatus=""
subnetId=""
availabilityZone=""
routeTableId=""
routes=""
####################################################################################
### Code Section ###################################################################

main() {
	read -p "Enter that instanceID: " instanceID

	instanceAttributes
	instanceAttributeTell

	if [[ -z "$routeTableId" ]]; then
		echo "The instance is using the main route table."
	else
		echo "$routeTableId" is the routeTableID of the instance.
		echo "$routes"
	fi

#interactive query to find if user wantes this answer.
#read -p "Do you want to find the routes? (y/n) " wantsRoute
#while [[ "$wantsRoute" != [nNyY] ]]; do
#        read -p "You gotta enter \"y\" or \"n\": " wantsRoute
#        if [[ wantsRoute == [nN] ]]; then
#			echo "fine. be that way"
#		else
#			echo $routes
#		fi
#done


set -u
echo "end of test."
}





####################################################################################
### Global Stuffs ##################################################################
### F()::instanceAttributes 
# User's instance attributes are stored for processing.
instanceAttributes() {
	instanceType=`aws ec2 describe-instances --instance-id $instanceID --query 'Reservations[*].Instances[*].[InstanceType]' --output text`
	currentStatus=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[State.Name]' --output text`
	subnetId=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[SubnetId]' --output text`
	availabilityZone=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[Placement.AvailabilityZone]' --output text`
	routeTableId=`aws ec2 describe-route-tables --query "RouteTables[*].Associations[?SubnetId=='$subnetId'].RouteTableId" --output text`
	CidrBlock=`aws ec2 describe-subnets --query "Subnets[?SubnetId=='subnet-7015b539'].CidrBlock" --output text`
	vpcId=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[VpcId]' --output text`	
	
	#find the routes
	if [[ -z "$routeTableId" ]]; then
		routeTableId=`aws ec2 describe-route-tables --query "RouteTables[*].Associations[?Main].RouteTableId" --output text`
		routes=`aws ec2 describe-route-tables --route-table-ids $routeTableId --query "RouteTables[*].Routes[*]" --output table`
	else
		routes=`aws ec2 describe-route-tables --route-table-ids $routeTableId --query "RouteTables[*].Routes[*]" --output table`
		echo "This is the Route Table: \n $routes"
	fi
}
### F()::instanceAttributes
# (Optional) Returns instance attributes to the user. 
instanceAttributeTell() {
echo "Instance type:	$instanceType"
echo "Status:		$currentStatus"
echo "Subnet:		$subnetId"
echo "CiDr:		$CidrBlock"
echo "AZ:		$availabilityZone"
echo "RouteID:		$routeTableId"
echo "VpcID:		$vpcId"
}

main "$@"
