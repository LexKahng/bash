#!/bin/bash
####################################################################################
# Author: Daniel Kahng #############################################################
# Ver: 0.1 #########################################################################
### Purpose & Overview #############################################################
# The script will be used to retrieve network resource relationships to the instance. 
# The script currently takes instanceID as input.
#***Assumes:AWS_PROFILE and AWS_REGION is already set***
# For collaborators: Please refer to Variable Dictionary at the bottom
####################################################################################
# Current To Do: 
# Access Investigator: access to target ec2 investigation
# variable convention: main variablename + 2 : eg. availabilityZone2
# 	variable of the target will be local. global will mess shit up.
# sub-option will have choice for ec2 input:
# This will be used to check against the first instance. 
#####################################################################################
# Long term goals:
# Access Investigator: for various types of resources (possibly check iam roles)
# Input Validation for first option, or any string input. Expand the input type and
# possibly node name
####################################################################################
### Main Section ###################################################################

main() {
	read -p "Enter that instanceID: " instanceID
	
	#Run the Alpha functions
	instanceAttributes
	instanceAttributeTell
	
	#need case option function here after defining
	#1) Show Route table
	#2) Show ACL
	#3) Show SG
	#4) I want to see if my thingey can route to another thingey
	optionMain
		

	set -u
	echo "Omega"
}




### Variable Dictionary - To be moved to a separate File ###########################
#instanceType - Prints Instance Type
#currentStatus - Stores state of the Instance. If the instance is running, will print "running"
#subnetId - Stores Subnet ID
#availabilityZone - Stores Availability Zone
#routeTableId - Stores Route Table ID
#routeTable - Stores Table format of the routeTable
####################################################################################
### Variable Instantiation #########################################################
availabilityZone=""
cidrBlock=""
currentStatus=""
instanceID=""
instanceType=""
subnetId=""
routeTableId=""
routeTable=""
igwId=""
vpcId="" 
sgTable=""
sgLength=""
aclTableOutbound=""
aclTableInbound=""
aclId=""

####################################################################################
### Global Stuffs ##################################################################

### In progress ####################################################################

### F()::setInv
# Returns: Nothing
# Role: Used by F()::optionInv
# Assumes: f()::instanceAttributes ran already
# 
#setInv() {
#}

### F()::optionInv
# Returns: Options
# Assumes: runs under F()::main
# Answers user query regarding Access investigator
#optionInv() {
#}
####################################################################################


### F()::instanceAttributes
# Assumes: This needs to be run first to set up core attributes for the instance input 
# User's instance attributes are stored for processing
instanceAttributes() {
	instanceType=`aws ec2 describe-instances --instance-id $instanceID --query 'Reservations[*].Instances[*].[InstanceType]' --output text`
	currentStatus=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[State.Name]' --output text`
	subnetId=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[SubnetId]' --output text`
	availabilityZone=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[Placement.AvailabilityZone]' --output text`
	cidrBlock=`aws ec2 describe-subnets --query "Subnets[?SubnetId=='$subnetId'].CidrBlock" --output text`
	vpcId=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[VpcId]' --output text`
}



### F()::instanceAttributeTell
# Returns: String
# Assumes: f()::instanceAttributes ran already
# (Optional) Returns instance attributes to the user 
instanceAttributeTell() {
echo "---------------------------------------------"
echo "Instance type:	$instanceType"
echo "Status:		$currentStatus"
echo "Subnet:		$subnetId"
echo "Cidr:		$cidrBlock"
echo "AZ:		$availabilityZone"
echo "VpcID:		$vpcId"
echo "---------------------------------------------"
}



### F()::setRoute
# Returns: Nothing
# Role: Used by F()::optionRoute
# Assumes: f(instanceAttributes) ran already
# Retrieves the instance route information
setRoute() {
	routeTableId=`aws ec2 describe-route-tables --query "RouteTables[*].Associations[?SubnetId=='$subnetId'].RouteTableId" --output text`
	if [[ -z "$routeTableId" ]]; then
		#This is done because implicitly associated route tables will return null. If null, uses VPC default
		#the below association have not yet been checked for VPC specificity, meaning it may return wrong value 
		routeTableId=`aws ec2 describe-route-tables --query "RouteTables[*].Associations[?Main].RouteTableId" --output text`
	fi
	routeTable=`aws ec2 describe-route-tables --route-table-ids $routeTableId --query 'RouteTables[*].Routes[*].{Destination:DestinationCidrBlock,Target:GatewayId,State:State}' --output table`
	igwId=`aws ec2 describe-route-tables --route-table-ids $routeTableId --query 'RouteTables[*].routeTable[*].GatewayId' --output text | grep -o '\bigw-\w*'`
}



### F()::setSG
# Returns: Nothing
# Role: Used by F()::optionSG
# Assumes: f()::instanceAttributes ran already
# Assigns Table formatted route information to $routeTable
setSG() {
	sgTable=`aws ec2 describe-instances --instance-id $instanceID --query 'Reservations[*].Instances[*].SecurityGroups[*].{GroupName:GroupName,GroupId:GroupId}' --output table`
	sgLength=`aws ec2 describe-instances --instance-id $instanceID --query 'Reservations[*].Instances[*].SecurityGroups[*]' | awk '/{/ {d++} /}/ {d--} /{/ && d==1 {count++} END{print count}'`
}



## F()::setACL
# Returns: Nothing
# Role: Used by F()::optionACL
# Assumes: f()::instanceAttributes ran already
# Assigns Table formatted route information to $aclTable
setACL() {
	if [[ -n “$subnetId” ]]; then
		aclId=`aws ec2 describe-network-acls --query "NetworkAcls[*].Associations[?SubnetId=='$subnetId'].NetworkAclId" --output text`
		if [[ -z aclId ]]; then
			aclId=`aws ec2 describe-network-acls --query "NetworkAcls[? VpcId=='$vpcId' && IsDefault].NetworkAclId" --output text`
		fi
	fi
	
	if [[ -n "$aclId" ]]; then
		aclTableOutbound=`aws ec2 describe-network-acls --network-acl-ids "$aclId" --query 'NetworkAcls[*].Entries[?Egress].{Cidr:CidrBlock,Rule:RuleAction,RuleNumber:RuleNumber}' --output table`
		aclTableInbound=$(aws ec2 describe-network-acls --network-acl-ids acl-e66d4081 --query 'NetworkAcls[*].Entries[?Egress==`false`].{Cidr:CidrBlock,Rule:RuleAction,RuleNumber:RuleNumber}' --output table)
	else
		aclTableOutbound="No ACL associated with SG? a bug in code?"
		aclTableOutbound="No ACL associated with SG? a bug in code?"
	fi
	
}



## F()::optionMain
# Returns: The Main menu for users to dig deeper
# Assumes: f()::instanceAttributes and F()::instanceAttributeTell ran already
# Provides different options for investigation
optionMain() {
	PS3="Select from the list above if you want to know more about $instanceID: "
	PS3Copy=$PS3
	options=("Route Table" "Network ACL" "Security Group Information" "Access Investigator" "Quit")
	
	### F()::optionMain::optionMenuRestore 
	# Main Menu Management
	optionMain=$(optionReviewer)
	optionMenuRestore() {
		PS3=$PS3Copy
		echo "$PS3"
		echo "$optionMain"
	}
	
	select opt in "${options[@]}"
	do
    	case $opt in
        	"Route Table")
        		optionRoute
        		optionMenuRestore
            	;;
       		"Network ACL")
       			optionACL
        		optionMenuRestore
            	;;
        	"Security Group Information")
            	optionSG
            	optionMenuRestore
            	;;
            "Access Investigator")
            	echo "workin on it piss off"
            	#Require prompting user input for ec2
            	#sub-option specific to route to ec2
            	#rest will be for other resource; each code is resource-specific, so done this way.
            	optionMenuRestore
            	;;
        	"Quit")
            	break
            	;;
        	*) echo "invalid option $REPLY";;
    	esac
	done
}



### F()::optionRoute
# Returns: Options
# Assumes: runs under F()::main
# Answers user query regarding instance routing
optionRoute() {
	if [[ -z "$routeTable" ]]; then
		setRoute
	fi
	PS3="Select from the list above if you want to know more about $instanceID's Route: "
	options=("View RouteID and Route Table" "Back to Main")
	
	select opt in "${options[@]}"
	do
	    case $opt in
	        "View RouteID and Route Table")
            	echo "$instanceID routes via: $routeTableId"
            	echo "This is the route table:"
            	echo "$routeTable"
            	optionReviewer           	
	            ;;
	        "Back to Main")
	            break
	            ;;
	        *) echo "invalid option $REPLY";;
    	esac
	done
}



### F()::optionACL
# Returns: Options
# Assumes: runs under F()::main
# Answers user query regarding ACL
optionACL() {
	#need if condition to find preexisting like others: (this is for run efficiency; do not want to search for something already found
	if [[ -z "$aclTable" ]]; then
	setACL
	fi
	
	PS3="Select from the list above if you want to know more about $instanceID's ACL: "
	options=("View Outbound ACL Rules" "View Inbound ACL Rules" "Back to Main")
	
	select opt in "${options[@]}"
	do
	    case $opt in
	        "View Outbound ACL Rules")
            	echo "$aclTableOutbound"
            	optionReviewer
	            ;;
	        "View Inbound ACL Rules")
            	echo "$aclTableInbound"
            	optionReviewer
	            ;;
	        "Back to Main")
	            break
	            ;;
	        *) echo "invalid option $REPLY";;
    	esac
	done
}



### F()::optionSG
# Returns: Options
# Assumes: runs under F()::main
# Answers user query regarding Security Group
optionSG() {
	#Retrieves the instance's SG information if values are empty.
	if [[ -z "$sgLength" ]]; then
		setSG
	fi
	
	PS3="Select from the list above if you want to know more about $instanceID's Security Groups: "
	options=("View Security Group List" "Back to Main")
	
	select opt in "${options[@]}"
	do
	    case $opt in
	        "View Security Group List")
            	echo "$sgTable"
            	optionReviewer
	            ;;
	        "Back to Main")
	            break
	            ;;
	        *) echo "invalid option $REPLY";;
    	esac
	done
}



### F()::optionReviewer
# Returns: Displays options of current Menu
# Assumes: Triggered within menus (case) Assumes $options is assigned
optionReviewer() {
echo "Here are your current options:"
counter=1
for i in "${options[@]}"
do
    echo "$counter) $i"
    ((counter++))
done
}

main "$@"