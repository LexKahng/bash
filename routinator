#!/bin/bash
####################################################################################
### Purpose & Overview #############################################################
#The script will be used to retrieve network resource relationships to the instance. 
#The script currently takes instanceID as input.
#***Assumes:AWS_PROFILE and AWS_REGION is already set***
####################################################################################
### instance type, running state, subnet, az #######################################
### Variable Dictionary
#instanceType - Prints Instance Type
#currentStatus - Stores state of the Instance. If the instance is running, will print "running"
#subnetId - Stores Subnet ID
#availabilityZone - Stores Availability Zone
#routeTableId - Stores Route Table ID
#routes - Stores Table format of the Routes
####################################################################################
### Variable Instantiation #########################################################
availabilityZone=""
cidrBlock=""
currentStatus=""
instanceID=""
instanceType=""
subnetId=""
routeTableId=""
routes=""
igwId=""
vpcId=""

## newly added 
sgList=""
acl=""
caseMaster=""
####################################################################################
### Code Section ###################################################################

main() {
	read -p "Enter that instanceID: " instanceID
	
	#Run the Alpha functions
	instanceAttributes
	getRoute
	instanceAttributeTell
	echo "$routes"
	
	#need case option function here after defining
	#1) Show Route table
	#2) Show ACL
	#3) Show SG
	#4) I want to see if my thingey can route to another thingey
		

set -u
echo "Omega"
}






####################################################################################
### Global Stuffs ##################################################################
### F()::instanceAttributes
# Assumes: This needs to be run first to set up core attributes for the instance input 
# User's instance attributes are stored for processing
instanceAttributes() {
	instanceType=`aws ec2 describe-instances --instance-id $instanceID --query 'Reservations[*].Instances[*].[InstanceType]' --output text`
	currentStatus=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[State.Name]' --output text`
	subnetId=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[SubnetId]' --output text`
	availabilityZone=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[Placement.AvailabilityZone]' --output text`
	routeTableId=`aws ec2 describe-route-tables --query "RouteTables[*].Associations[?SubnetId=='$subnetId'].RouteTableId" --output text`
	cidrBlock=`aws ec2 describe-subnets --query "Subnets[?SubnetId=='subnet-7015b539'].CidrBlock" --output text`
	vpcId=`aws ec2 describe-instances --instance-ids $instanceID --query 'Reservations[*].Instances[*].[VpcId]' --output text`		
}


### F()::getRoute
# Returns: Nothing
# Assumes: f(instanceAttributes) ran already
# Assigns Table formatted route information to $routes
getRoute() {
	if [[ -z "$routeTableId" ]]; then
		routeTableId=`aws ec2 describe-route-tables --query "RouteTables[*].Associations[?Main].RouteTableId" --output text`
	fi
	routes=`aws ec2 describe-route-tables --route-table-ids $routeTableId --query "RouteTables[*].Routes[*].{Destination:DestinationCidrBlock,Target:GatewayId,State:State}" --output table`
	igwId=`aws ec2 describe-route-tables --route-table-ids $routeTableId --query "RouteTables[*].Routes[*].GatewayId" --output text | grep -o '\bigw-\w*'`
}


### F()::instanceAttributes
# Returns: String
# Assumes: f(instanceAttributes) ran already
# (Optional) Returns instance attributes to the user 
instanceAttributeTell() {
echo "Instance type:	$instanceType"
echo "Status:		$currentStatus"
echo "Subnet:		$subnetId"
echo "CiDr:		$cidrBlock"
echo "AZ:		$availabilityZone"
echo "RouteID:		$routeTableId"
echo "VpcID:		$vpcId"
}

main "$@"
